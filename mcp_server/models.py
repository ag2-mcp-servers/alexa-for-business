# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:30:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class Address(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class AddressBookDescription(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=200,
    )


class AddressBookName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class AlreadyExistsException(RootModel[Any]):
    root: Any


class AmazonId(RootModel[constr(pattern=r'[a-zA-Z0-9]{1,18}')]):
    root: constr(pattern=r'[a-zA-Z0-9]{1,18}')


class ApplianceDescription(RootModel[str]):
    root: str


class ApplianceFriendlyName(RootModel[str]):
    root: str


class ApplianceManufacturerName(RootModel[str]):
    root: str


class ApproveSkillResponse(BaseModel):
    pass


class Arn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}'
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}'
    )


class AssociateContactWithAddressBookRequest(BaseModel):
    AddressBookArn: Arn
    ContactArn: Arn


class AssociateContactWithAddressBookResponse(BaseModel):
    pass


class AssociateDeviceWithNetworkProfileRequest(BaseModel):
    DeviceArn: Arn
    NetworkProfileArn: Arn


class AssociateDeviceWithNetworkProfileResponse(BaseModel):
    pass


class AssociateDeviceWithRoomRequest(BaseModel):
    DeviceArn: Optional[Arn] = None
    RoomArn: Optional[Arn] = None


class AssociateDeviceWithRoomResponse(BaseModel):
    pass


class AssociateSkillGroupWithRoomRequest(BaseModel):
    RoomArn: Optional[Arn] = None
    SkillGroupArn: Optional[Arn] = None


class AssociateSkillGroupWithRoomResponse(BaseModel):
    pass


class AssociateSkillWithSkillGroupResponse(BaseModel):
    pass


class AssociateSkillWithUsersResponse(BaseModel):
    pass


class AudioLocation(
    RootModel[
        constr(
            pattern=r'https://([A-Za-z0-9_.-]+)?(s3-[A-Za-z0-9-]+|s3\.([A-Za-z0-9-])+|s3|s3.dualstack\.([A-Za-z0-9-])+)+.amazonaws.com/.*',
            min_length=0,
            max_length=1200,
        )
    ]
):
    root: constr(
        pattern=r'https://([A-Za-z0-9_.-]+)?(s3-[A-Za-z0-9-]+|s3\.([A-Za-z0-9-])+|s3|s3.dualstack\.([A-Za-z0-9-])+)+.amazonaws.com/.*',
        min_length=0,
        max_length=1200,
    )


class Boolean(RootModel[bool]):
    root: bool


class BulletPoint(RootModel[str]):
    root: str


class BulletPoints(RootModel[List[BulletPoint]]):
    root: List[BulletPoint]


class BusinessReportDeliveryTime(RootModel[datetime]):
    root: datetime


class BusinessReportDownloadUrl(RootModel[str]):
    root: str


class BusinessReportFailureCode(Enum):
    ACCESS_DENIED = 'ACCESS_DENIED'
    NO_SUCH_BUCKET = 'NO_SUCH_BUCKET'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'


class BusinessReportFormat(Enum):
    CSV = 'CSV'
    CSV_ZIP = 'CSV_ZIP'


class BusinessReportInterval(Enum):
    ONE_DAY = 'ONE_DAY'
    ONE_WEEK = 'ONE_WEEK'
    THIRTY_DAYS = 'THIRTY_DAYS'


class BusinessReportS3Path(RootModel[str]):
    root: str


class BusinessReportScheduleName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=0,
            max_length=64,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=0,
        max_length=64,
    )


class BusinessReportStatus(Enum):
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class CategoryId(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class CategoryName(RootModel[str]):
    root: str


class CertificateTime(RootModel[datetime]):
    root: datetime


class ClientId(RootModel[constr(pattern=r'^\S\+\{1,256\}$')]):
    root: constr(pattern=r'^\S\+\{1,256\}$')


class ClientRequestToken(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=10, max_length=150)
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=10, max_length=150
    ) = Field(
        ...,
        description='A unique, user-specified identifier for the request that ensures idempotency.',
    )


class CommsProtocol(Enum):
    SIP = 'SIP'
    SIPS = 'SIPS'
    H323 = 'H323'


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConferencePreference(BaseModel):
    DefaultConferenceProviderArn: Optional[Arn] = None


class ConferenceProviderName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=50,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=50,
    )


class ConferenceProviderType(Enum):
    CHIME = 'CHIME'
    BLUEJEANS = 'BLUEJEANS'
    FUZE = 'FUZE'
    GOOGLE_HANGOUTS = 'GOOGLE_HANGOUTS'
    POLYCOM = 'POLYCOM'
    RINGCENTRAL = 'RINGCENTRAL'
    SKYPE_FOR_BUSINESS = 'SKYPE_FOR_BUSINESS'
    WEBEX = 'WEBEX'
    ZOOM = 'ZOOM'
    CUSTOM = 'CUSTOM'


class ConnectionStatus(Enum):
    ONLINE = 'ONLINE'
    OFFLINE = 'OFFLINE'


class ConnectionStatusUpdatedTime(RootModel[datetime]):
    root: datetime


class ContactName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class CountryCode(RootModel[constr(pattern=r'\d{1,3}')]):
    root: constr(pattern=r'\d{1,3}')


class CreateAddressBookResponse(BaseModel):
    AddressBookArn: Optional[Arn] = None


class CreateBusinessReportScheduleResponse(BaseModel):
    ScheduleArn: Optional[Arn] = None


class CreateConferenceProviderResponse(BaseModel):
    ConferenceProviderArn: Optional[Arn] = None


class CreateContactResponse(BaseModel):
    ContactArn: Optional[Arn] = None


class CreateGatewayGroupResponse(BaseModel):
    GatewayGroupArn: Optional[Arn] = None


class CreateNetworkProfileResponse(BaseModel):
    NetworkProfileArn: Optional[Arn] = None


class CreateProfileResponse(BaseModel):
    ProfileArn: Optional[Arn] = None


class CreateRoomResponse(BaseModel):
    RoomArn: Optional[Arn] = None


class CreateSkillGroupResponse(BaseModel):
    SkillGroupArn: Optional[Arn] = None


class CreateUserResponse(BaseModel):
    UserArn: Optional[Arn] = None


class CurrentWiFiPassword(RootModel[SecretStr]):
    root: SecretStr


class CustomerS3BucketName(RootModel[constr(pattern=r'[a-z0-9-\.]{3,63}')]):
    root: constr(pattern=r'[a-z0-9-\.]{3,63}')


class Date(
    RootModel[constr(pattern=r'^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$')]
):
    root: constr(pattern=r'^\d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])$')


class DeleteAddressBookRequest(BaseModel):
    AddressBookArn: Arn


class DeleteAddressBookResponse(BaseModel):
    pass


class DeleteBusinessReportScheduleRequest(BaseModel):
    ScheduleArn: Arn


class DeleteBusinessReportScheduleResponse(BaseModel):
    pass


class DeleteConferenceProviderRequest(BaseModel):
    ConferenceProviderArn: Arn


class DeleteConferenceProviderResponse(BaseModel):
    pass


class DeleteContactRequest(BaseModel):
    ContactArn: Arn


class DeleteContactResponse(BaseModel):
    pass


class DeleteDeviceRequest(BaseModel):
    DeviceArn: Arn


class DeleteDeviceResponse(BaseModel):
    pass


class DeleteDeviceUsageDataResponse(BaseModel):
    pass


class DeleteGatewayGroupRequest(BaseModel):
    GatewayGroupArn: Arn


class DeleteGatewayGroupResponse(BaseModel):
    pass


class DeleteNetworkProfileRequest(BaseModel):
    NetworkProfileArn: Arn


class DeleteNetworkProfileResponse(BaseModel):
    pass


class DeleteProfileRequest(BaseModel):
    ProfileArn: Optional[Arn] = None


class DeleteProfileResponse(BaseModel):
    pass


class DeleteRoomRequest(BaseModel):
    RoomArn: Optional[Arn] = None


class DeleteRoomResponse(BaseModel):
    pass


class DeleteRoomSkillParameterResponse(BaseModel):
    pass


class DeleteSkillAuthorizationResponse(BaseModel):
    pass


class DeleteSkillGroupRequest(BaseModel):
    SkillGroupArn: Optional[Arn] = None


class DeleteSkillGroupResponse(BaseModel):
    pass


class DeleteUserResponse(BaseModel):
    pass


class DeveloperName(RootModel[str]):
    root: str


class DeviceDataCreatedTime(RootModel[datetime]):
    root: datetime


class DeviceEventTime(RootModel[datetime]):
    root: datetime


class DeviceEventType(Enum):
    CONNECTION_STATUS = 'CONNECTION_STATUS'
    DEVICE_STATUS = 'DEVICE_STATUS'


class DeviceEventValue(RootModel[str]):
    root: str


class DeviceLocale(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DeviceName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=2,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=2,
        max_length=100,
    )


class DeviceNetworkProfileInfo(BaseModel):
    CertificateArn: Optional[Arn] = None
    CertificateExpirationTime: Optional[CertificateTime] = None
    NetworkProfileArn: Optional[Arn] = None


class DeviceNotRegisteredException(RootModel[Any]):
    root: Any


class DeviceRoomName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class DeviceSerialNumber(RootModel[constr(pattern=r'[a-zA-Z0-9]{1,200}')]):
    root: constr(pattern=r'[a-zA-Z0-9]{1,200}')


class DeviceSerialNumberForAVS(RootModel[constr(pattern=r'^[a-zA-Z0-9]{1,50}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9]{1,50}$')


class DeviceStatus(Enum):
    READY = 'READY'
    PENDING = 'PENDING'
    WAS_OFFLINE = 'WAS_OFFLINE'
    DEREGISTERED = 'DEREGISTERED'
    FAILED = 'FAILED'


class DeviceStatusDetailCode(Enum):
    DEVICE_SOFTWARE_UPDATE_NEEDED = 'DEVICE_SOFTWARE_UPDATE_NEEDED'
    DEVICE_WAS_OFFLINE = 'DEVICE_WAS_OFFLINE'
    CREDENTIALS_ACCESS_FAILURE = 'CREDENTIALS_ACCESS_FAILURE'
    TLS_VERSION_MISMATCH = 'TLS_VERSION_MISMATCH'
    ASSOCIATION_REJECTION = 'ASSOCIATION_REJECTION'
    AUTHENTICATION_FAILURE = 'AUTHENTICATION_FAILURE'
    DHCP_FAILURE = 'DHCP_FAILURE'
    INTERNET_UNAVAILABLE = 'INTERNET_UNAVAILABLE'
    DNS_FAILURE = 'DNS_FAILURE'
    UNKNOWN_FAILURE = 'UNKNOWN_FAILURE'
    CERTIFICATE_ISSUING_LIMIT_EXCEEDED = 'CERTIFICATE_ISSUING_LIMIT_EXCEEDED'
    INVALID_CERTIFICATE_AUTHORITY = 'INVALID_CERTIFICATE_AUTHORITY'
    NETWORK_PROFILE_NOT_FOUND = 'NETWORK_PROFILE_NOT_FOUND'
    INVALID_PASSWORD_STATE = 'INVALID_PASSWORD_STATE'
    PASSWORD_NOT_FOUND = 'PASSWORD_NOT_FOUND'
    PASSWORD_MANAGER_ACCESS_DENIED = 'PASSWORD_MANAGER_ACCESS_DENIED'
    CERTIFICATE_AUTHORITY_ACCESS_DENIED = 'CERTIFICATE_AUTHORITY_ACCESS_DENIED'


class DeviceType(RootModel[constr(pattern=r'[a-zA-Z0-9]{1,200}')]):
    root: constr(pattern=r'[a-zA-Z0-9]{1,200}')


class DeviceUsageType(Enum):
    VOICE = 'VOICE'


class DisassociateContactFromAddressBookRequest(BaseModel):
    AddressBookArn: Arn
    ContactArn: Arn


class DisassociateContactFromAddressBookResponse(BaseModel):
    pass


class DisassociateDeviceFromRoomRequest(BaseModel):
    DeviceArn: Optional[Arn] = None


class DisassociateDeviceFromRoomResponse(BaseModel):
    pass


class DisassociateSkillFromSkillGroupResponse(BaseModel):
    pass


class DisassociateSkillFromUsersResponse(BaseModel):
    pass


class DisassociateSkillGroupFromRoomRequest(BaseModel):
    RoomArn: Optional[Arn] = None
    SkillGroupArn: Optional[Arn] = None


class DisassociateSkillGroupFromRoomResponse(BaseModel):
    pass


class DistanceUnit(Enum):
    METRIC = 'METRIC'
    IMPERIAL = 'IMPERIAL'


class Email(
    RootModel[
        constr(
            pattern=r'([0-9a-zA-Z]([+-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z]([-\w]*[0-9a-zA-Z]+)*\.)+[a-zA-Z]{2,9})',
            min_length=1,
            max_length=128,
        )
    ]
):
    root: constr(
        pattern=r'([0-9a-zA-Z]([+-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z]([-\w]*[0-9a-zA-Z]+)*\.)+[a-zA-Z]{2,9})',
        min_length=1,
        max_length=128,
    )


class EnablementType(Enum):
    ENABLED = 'ENABLED'
    PENDING = 'PENDING'


class EnablementTypeFilter(Enum):
    ENABLED = 'ENABLED'
    PENDING = 'PENDING'


class EndOfMeetingReminderType(Enum):
    ANNOUNCEMENT_TIME_CHECK = 'ANNOUNCEMENT_TIME_CHECK'
    ANNOUNCEMENT_VARIABLE_TIME_LEFT = 'ANNOUNCEMENT_VARIABLE_TIME_LEFT'
    CHIME = 'CHIME'
    KNOCK = 'KNOCK'


class EndUserLicenseAgreement(RootModel[str]):
    root: str


class Endpoint(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class EnrollmentId(RootModel[constr(min_length=0, max_length=128)]):
    root: constr(min_length=0, max_length=128)


class EnrollmentStatus(Enum):
    INITIALIZED = 'INITIALIZED'
    PENDING = 'PENDING'
    REGISTERED = 'REGISTERED'
    DISASSOCIATING = 'DISASSOCIATING'
    DEREGISTERING = 'DEREGISTERING'


class Feature(Enum):
    BLUETOOTH = 'BLUETOOTH'
    VOLUME = 'VOLUME'
    NOTIFICATIONS = 'NOTIFICATIONS'
    LISTS = 'LISTS'
    SKILLS = 'SKILLS'
    NETWORK_PROFILE = 'NETWORK_PROFILE'
    SETTINGS = 'SETTINGS'
    ALL = 'ALL'


class Features(RootModel[List[Feature]]):
    root: List[Feature]


class FilterKey(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class FilterValue(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class FilterValueList(RootModel[List[FilterValue]]):
    root: List[FilterValue] = Field(..., max_length=50)


class ForgetSmartHomeAppliancesRequest(BaseModel):
    RoomArn: Arn


class ForgetSmartHomeAppliancesResponse(BaseModel):
    pass


class GatewayDescription(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=0,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=0,
        max_length=200,
    )


class GatewayGroupDescription(RootModel[constr(min_length=0, max_length=200)]):
    root: constr(min_length=0, max_length=200)


class GatewayGroupName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class GatewayGroupSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description: Optional[GatewayGroupDescription] = None
    Name: Optional[GatewayGroupName] = None


class GatewayName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=253,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=253,
    )


class GatewayVersion(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class GenericKeyword(RootModel[str]):
    root: str


class GenericKeywords(RootModel[List[GenericKeyword]]):
    root: List[GenericKeyword]


class GetAddressBookRequest(BaseModel):
    AddressBookArn: Arn


class GetConferencePreferenceRequest(BaseModel):
    pass


class GetConferencePreferenceResponse(BaseModel):
    Preference: Optional[ConferencePreference] = None


class GetConferenceProviderRequest(BaseModel):
    ConferenceProviderArn: Arn


class GetContactRequest(BaseModel):
    ContactArn: Arn


class GetDeviceRequest(BaseModel):
    DeviceArn: Optional[Arn] = None


class GetGatewayGroupRequest(BaseModel):
    GatewayGroupArn: Arn


class GetGatewayRequest(BaseModel):
    GatewayArn: Arn


class GetInvitationConfigurationRequest(BaseModel):
    pass


class GetNetworkProfileRequest(BaseModel):
    NetworkProfileArn: Arn


class GetProfileRequest(BaseModel):
    ProfileArn: Optional[Arn] = None


class GetRoomRequest(BaseModel):
    RoomArn: Optional[Arn] = None


class GetSkillGroupRequest(BaseModel):
    SkillGroupArn: Optional[Arn] = None


class IPDialIn(BaseModel):
    CommsProtocol_1: CommsProtocol = Field(..., alias='CommsProtocol')
    Endpoint_1: Endpoint = Field(..., alias='Endpoint')


class IconUrl(RootModel[str]):
    root: str


class InvalidCertificateAuthorityException(RootModel[Any]):
    root: Any


class InvalidDeviceException(RootModel[Any]):
    root: Any


class InvalidSecretsManagerResourceException(RootModel[Any]):
    root: Any


class InvalidServiceLinkedRoleStateException(RootModel[Any]):
    root: Any


class InvalidUserStatusException(RootModel[Any]):
    root: Any


class InvocationPhrase(RootModel[str]):
    root: str


class Key(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class LimitExceededException(RootModel[Any]):
    root: Any


class Locale(Enum):
    en_US = 'en-US'


class MacAddress(RootModel[str]):
    root: str


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MaxVolumeLimit(RootModel[int]):
    root: int


class Minutes(RootModel[int]):
    root: int


class NameInUseException(RootModel[Any]):
    root: Any


class NetworkEapMethod(Enum):
    EAP_TLS = 'EAP_TLS'


class NetworkProfileDescription(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=0,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=0,
        max_length=200,
    )


class NetworkProfileName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class NetworkSecurityType(Enum):
    OPEN = 'OPEN'
    WEP = 'WEP'
    WPA_PSK = 'WPA_PSK'
    WPA2_PSK = 'WPA2_PSK'
    WPA2_ENTERPRISE = 'WPA2_ENTERPRISE'


class NetworkSsid(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=32,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=32,
    )


class NewInThisVersionBulletPoints(RootModel[List[BulletPoint]]):
    root: List[BulletPoint]


class NextToken(RootModel[constr(min_length=1, max_length=1100)]):
    root: constr(min_length=1, max_length=1100)


class NextWiFiPassword(RootModel[SecretStr]):
    root: SecretStr


class NotFoundException(RootModel[Any]):
    root: Any


class OneClickIdDelay(RootModel[constr(min_length=1, max_length=2)]):
    root: constr(min_length=1, max_length=2)


class OneClickPinDelay(RootModel[constr(min_length=1, max_length=2)]):
    root: constr(min_length=1, max_length=2)


class OrganizationName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class OutboundPhoneNumber(RootModel[constr(pattern=r'\d{10}')]):
    root: constr(pattern=r'\d{10}')


class PSTNDialIn(BaseModel):
    CountryCode_1: CountryCode = Field(..., alias='CountryCode')
    OneClickIdDelay_1: OneClickIdDelay = Field(..., alias='OneClickIdDelay')
    OneClickPinDelay_1: OneClickPinDelay = Field(..., alias='OneClickPinDelay')
    PhoneNumber: OutboundPhoneNumber


class PhoneNumberType(Enum):
    MOBILE = 'MOBILE'
    WORK = 'WORK'
    HOME = 'HOME'


class PrivacyPolicy(RootModel[str]):
    root: str


class ProductDescription(RootModel[str]):
    root: str


class ProductId(RootModel[constr(pattern=r'^[a-zA-Z0-9_]{1,256}$')]):
    root: constr(pattern=r'^[a-zA-Z0-9_]{1,256}$')


class ProfileName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class ProviderCalendarId(RootModel[constr(min_length=0, max_length=100)]):
    root: constr(min_length=0, max_length=100)


class PutConferencePreferenceRequest(BaseModel):
    ConferencePreference_1: ConferencePreference = Field(
        ..., alias='ConferencePreference'
    )


class PutConferencePreferenceResponse(BaseModel):
    pass


class PutInvitationConfigurationResponse(BaseModel):
    pass


class PutRoomSkillParameterResponse(BaseModel):
    pass


class PutSkillAuthorizationResponse(BaseModel):
    pass


class RawPhoneNumber(RootModel[SecretStr]):
    root: SecretStr


class RegisterAVSDeviceResponse(BaseModel):
    DeviceArn: Optional[Arn] = None


class RejectSkillResponse(BaseModel):
    pass


class ReleaseDate(RootModel[str]):
    root: str


class RequireCheckIn(BaseModel):
    Enabled: Optional[Boolean] = None
    ReleaseAfterMinutes: Optional[Minutes] = None


class RequirePin(Enum):
    YES = 'YES'
    NO = 'NO'
    OPTIONAL = 'OPTIONAL'


class ResourceAssociatedException(RootModel[Any]):
    root: Any


class ResourceInUseException(RootModel[Any]):
    root: Any


class ReviewKey(RootModel[str]):
    root: str


class ReviewValue(RootModel[str]):
    root: str


class Reviews(RootModel[Optional[Dict[str, ReviewValue]]]):
    root: Optional[Dict[str, ReviewValue]] = None


class RevokeInvitationRequest(BaseModel):
    EnrollmentId_1: Optional[EnrollmentId] = Field(None, alias='EnrollmentId')
    UserArn: Optional[Arn] = None


class RevokeInvitationResponse(BaseModel):
    pass


class RoomDescription(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=200,
    )


class RoomName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class RoomSkillParameterKey(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class RoomSkillParameterValue(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class S3KeyPrefix(
    RootModel[
        constr(pattern=r'[A-Za-z0-9!_\-\.\*\'()/]*', min_length=0, max_length=100)
    ]
):
    root: constr(pattern=r'[A-Za-z0-9!_\-\.\*\'()/]*', min_length=0, max_length=100)


class SendAnnouncementResponse(BaseModel):
    AnnouncementArn: Optional[Arn] = None


class SendInvitationRequest(BaseModel):
    UserArn: Optional[Arn] = None


class SendInvitationResponse(BaseModel):
    pass


class ShortDescription(RootModel[str]):
    root: str


class SipType(Enum):
    WORK = 'WORK'


class SipUri(RootModel[SecretStr]):
    root: SecretStr


class SkillGroupDescription(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=200,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=200,
    )


class SkillGroupName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class SkillId(
    RootModel[
        constr(
            pattern=r'(^amzn1\.ask\.skill\.[0-9a-f\-]{1,200})|(^amzn1\.echo-sdk-ams\.app\.[0-9a-f\-]{1,200})'
        )
    ]
):
    root: constr(
        pattern=r'(^amzn1\.ask\.skill\.[0-9a-f\-]{1,200})|(^amzn1\.echo-sdk-ams\.app\.[0-9a-f\-]{1,200})'
    )


class SkillListMaxResults(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class SkillName(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=1,
            max_length=100,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=1,
        max_length=100,
    )


class SkillNotLinkedException(RootModel[Any]):
    root: Any


class SkillStoreType(RootModel[str]):
    root: str


class SkillType(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'


class SkillTypeFilter(Enum):
    PUBLIC = 'PUBLIC'
    PRIVATE = 'PRIVATE'
    ALL = 'ALL'


class SkillTypes(RootModel[List[SkillStoreType]]):
    root: List[SkillStoreType]


class SmartHomeAppliance(BaseModel):
    Description: Optional[ApplianceDescription] = None
    FriendlyName: Optional[ApplianceFriendlyName] = None
    ManufacturerName: Optional[ApplianceManufacturerName] = None


class SmartHomeApplianceList(RootModel[List[SmartHomeAppliance]]):
    root: List[SmartHomeAppliance]


class SoftwareVersion(RootModel[str]):
    root: str


class SortKey(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class SortValue(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class SsmlValue(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=0,
            max_length=4096,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=0,
        max_length=4096,
    )


class StartDeviceSyncRequest(BaseModel):
    DeviceArn: Optional[Arn] = None
    Features_1: Features = Field(..., alias='Features')
    RoomArn: Optional[Arn] = None


class StartDeviceSyncResponse(BaseModel):
    pass


class StartSmartHomeApplianceDiscoveryRequest(BaseModel):
    RoomArn: Arn


class StartSmartHomeApplianceDiscoveryResponse(BaseModel):
    pass


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TemperatureUnit(Enum):
    FAHRENHEIT = 'FAHRENHEIT'
    CELSIUS = 'CELSIUS'


class TextValue(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
            min_length=0,
            max_length=4096,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*',
        min_length=0,
        max_length=4096,
    )


class TimeToLiveInSeconds(RootModel[conint(ge=1, le=3600)]):
    root: conint(ge=1, le=3600)


class Timezone(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class TotalCount(RootModel[int]):
    root: int


class TrustAnchor(
    RootModel[
        constr(
            pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?'
        )
    ]
):
    root: constr(
        pattern=r'-{5}BEGIN CERTIFICATE-{5}\u000D?\u000A([A-Za-z0-9/+]{64}\u000D?\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\u000D?\u000A-{5}END CERTIFICATE-{5}(\u000D?\u000A)?'
    )


class TrustAnchorList(RootModel[List[TrustAnchor]]):
    root: List[TrustAnchor] = Field(..., max_length=5, min_length=1)


class UnauthorizedException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateAddressBookRequest(BaseModel):
    AddressBookArn: Arn
    Description: Optional[AddressBookDescription] = None
    Name: Optional[AddressBookName] = None


class UpdateAddressBookResponse(BaseModel):
    pass


class UpdateBusinessReportScheduleResponse(BaseModel):
    pass


class UpdateConferenceProviderResponse(BaseModel):
    pass


class UpdateContactResponse(BaseModel):
    pass


class UpdateDeviceRequest(BaseModel):
    DeviceArn: Optional[Arn] = None
    DeviceName_1: Optional[DeviceName] = Field(None, alias='DeviceName')


class UpdateDeviceResponse(BaseModel):
    pass


class UpdateGatewayGroupRequest(BaseModel):
    Description: Optional[GatewayGroupDescription] = None
    GatewayGroupArn: Arn
    Name: Optional[GatewayGroupName] = None


class UpdateGatewayGroupResponse(BaseModel):
    pass


class UpdateGatewayRequest(BaseModel):
    Description: Optional[GatewayDescription] = None
    GatewayArn: Arn
    Name: Optional[GatewayName] = None
    SoftwareVersion: Optional[GatewayVersion] = None


class UpdateGatewayResponse(BaseModel):
    pass


class UpdateInstantBooking(BaseModel):
    DurationInMinutes: Optional[Minutes] = None
    Enabled: Optional[Boolean] = None


class UpdateNetworkProfileRequest(BaseModel):
    CertificateAuthorityArn: Optional[Arn] = None
    CurrentPassword: Optional[CurrentWiFiPassword] = None
    Description: Optional[NetworkProfileDescription] = None
    NetworkProfileArn: Arn
    NetworkProfileName_1: Optional[NetworkProfileName] = Field(
        None, alias='NetworkProfileName'
    )
    NextPassword: Optional[NextWiFiPassword] = None
    TrustAnchors: Optional[TrustAnchorList] = None


class UpdateNetworkProfileResponse(BaseModel):
    pass


class UpdateProfileResponse(BaseModel):
    pass


class UpdateRequireCheckIn(BaseModel):
    Enabled: Optional[Boolean] = None
    ReleaseAfterMinutes: Optional[Minutes] = None


class UpdateRoomRequest(BaseModel):
    Description: Optional[RoomDescription] = None
    ProfileArn: Optional[Arn] = None
    ProviderCalendarId_1: Optional[ProviderCalendarId] = Field(
        None, alias='ProviderCalendarId'
    )
    RoomArn: Optional[Arn] = None
    RoomName_1: Optional[RoomName] = Field(None, alias='RoomName')


class UpdateRoomResponse(BaseModel):
    pass


class UpdateSkillGroupRequest(BaseModel):
    Description: Optional[SkillGroupDescription] = None
    SkillGroupArn: Optional[Arn] = None
    SkillGroupName_1: Optional[SkillGroupName] = Field(None, alias='SkillGroupName')


class UpdateSkillGroupResponse(BaseModel):
    pass


class Url(RootModel[str]):
    root: str


class UserCode(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class UserId(RootModel[constr(pattern=r'amzn1\.[A-Za-z0-9+-\/=.]{1,300}')]):
    root: constr(pattern=r'amzn1\.[A-Za-z0-9+-\/=.]{1,300}')


class Utterance(RootModel[str]):
    root: str


class Value(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class WakeWord(Enum):
    ALEXA = 'ALEXA'
    AMAZON = 'AMAZON'
    ECHO = 'ECHO'
    COMPUTER = 'COMPUTER'


class UserFirstName(
    RootModel[
        constr(
            pattern=r'([A-Za-z\-\' 0-9._]|\p{IsLetter})*', min_length=0, max_length=30
        )
    ]
):
    root: constr(
        pattern=r'([A-Za-z\-\' 0-9._]|\p{IsLetter})*', min_length=0, max_length=30
    )


class UserLastName(
    RootModel[
        constr(
            pattern=r'([A-Za-z\-\' 0-9._]|\p{IsLetter})*', min_length=0, max_length=30
        )
    ]
):
    root: constr(
        pattern=r'([A-Za-z\-\' 0-9._]|\p{IsLetter})*', min_length=0, max_length=30
    )


class UserUserId(
    RootModel[constr(pattern=r'[a-zA-Z0-9@_+.-]*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9@_+.-]*', min_length=1, max_length=128)


class XAmzTarget(Enum):
    AlexaForBusiness_ApproveSkill = 'AlexaForBusiness.ApproveSkill'


class XAmzTarget1(Enum):
    AlexaForBusiness_AssociateContactWithAddressBook = (
        'AlexaForBusiness.AssociateContactWithAddressBook'
    )


class XAmzTarget2(Enum):
    AlexaForBusiness_AssociateDeviceWithNetworkProfile = (
        'AlexaForBusiness.AssociateDeviceWithNetworkProfile'
    )


class XAmzTarget3(Enum):
    AlexaForBusiness_AssociateDeviceWithRoom = (
        'AlexaForBusiness.AssociateDeviceWithRoom'
    )


class XAmzTarget4(Enum):
    AlexaForBusiness_AssociateSkillGroupWithRoom = (
        'AlexaForBusiness.AssociateSkillGroupWithRoom'
    )


class XAmzTarget5(Enum):
    AlexaForBusiness_AssociateSkillWithSkillGroup = (
        'AlexaForBusiness.AssociateSkillWithSkillGroup'
    )


class XAmzTarget6(Enum):
    AlexaForBusiness_AssociateSkillWithUsers = (
        'AlexaForBusiness.AssociateSkillWithUsers'
    )


class XAmzTarget7(Enum):
    AlexaForBusiness_CreateAddressBook = 'AlexaForBusiness.CreateAddressBook'


class XAmzTarget8(Enum):
    AlexaForBusiness_CreateBusinessReportSchedule = (
        'AlexaForBusiness.CreateBusinessReportSchedule'
    )


class XAmzTarget9(Enum):
    AlexaForBusiness_CreateConferenceProvider = (
        'AlexaForBusiness.CreateConferenceProvider'
    )


class XAmzTarget10(Enum):
    AlexaForBusiness_CreateContact = 'AlexaForBusiness.CreateContact'


class XAmzTarget11(Enum):
    AlexaForBusiness_CreateGatewayGroup = 'AlexaForBusiness.CreateGatewayGroup'


class XAmzTarget12(Enum):
    AlexaForBusiness_CreateNetworkProfile = 'AlexaForBusiness.CreateNetworkProfile'


class XAmzTarget13(Enum):
    AlexaForBusiness_CreateProfile = 'AlexaForBusiness.CreateProfile'


class XAmzTarget14(Enum):
    AlexaForBusiness_CreateRoom = 'AlexaForBusiness.CreateRoom'


class XAmzTarget15(Enum):
    AlexaForBusiness_CreateSkillGroup = 'AlexaForBusiness.CreateSkillGroup'


class XAmzTarget16(Enum):
    AlexaForBusiness_CreateUser = 'AlexaForBusiness.CreateUser'


class XAmzTarget17(Enum):
    AlexaForBusiness_DeleteAddressBook = 'AlexaForBusiness.DeleteAddressBook'


class XAmzTarget18(Enum):
    AlexaForBusiness_DeleteBusinessReportSchedule = (
        'AlexaForBusiness.DeleteBusinessReportSchedule'
    )


class XAmzTarget19(Enum):
    AlexaForBusiness_DeleteConferenceProvider = (
        'AlexaForBusiness.DeleteConferenceProvider'
    )


class XAmzTarget20(Enum):
    AlexaForBusiness_DeleteContact = 'AlexaForBusiness.DeleteContact'


class XAmzTarget21(Enum):
    AlexaForBusiness_DeleteDevice = 'AlexaForBusiness.DeleteDevice'


class XAmzTarget22(Enum):
    AlexaForBusiness_DeleteDeviceUsageData = 'AlexaForBusiness.DeleteDeviceUsageData'


class XAmzTarget23(Enum):
    AlexaForBusiness_DeleteGatewayGroup = 'AlexaForBusiness.DeleteGatewayGroup'


class XAmzTarget24(Enum):
    AlexaForBusiness_DeleteNetworkProfile = 'AlexaForBusiness.DeleteNetworkProfile'


class XAmzTarget25(Enum):
    AlexaForBusiness_DeleteProfile = 'AlexaForBusiness.DeleteProfile'


class XAmzTarget26(Enum):
    AlexaForBusiness_DeleteRoom = 'AlexaForBusiness.DeleteRoom'


class XAmzTarget27(Enum):
    AlexaForBusiness_DeleteRoomSkillParameter = (
        'AlexaForBusiness.DeleteRoomSkillParameter'
    )


class XAmzTarget28(Enum):
    AlexaForBusiness_DeleteSkillAuthorization = (
        'AlexaForBusiness.DeleteSkillAuthorization'
    )


class XAmzTarget29(Enum):
    AlexaForBusiness_DeleteSkillGroup = 'AlexaForBusiness.DeleteSkillGroup'


class XAmzTarget30(Enum):
    AlexaForBusiness_DeleteUser = 'AlexaForBusiness.DeleteUser'


class XAmzTarget31(Enum):
    AlexaForBusiness_DisassociateContactFromAddressBook = (
        'AlexaForBusiness.DisassociateContactFromAddressBook'
    )


class XAmzTarget32(Enum):
    AlexaForBusiness_DisassociateDeviceFromRoom = (
        'AlexaForBusiness.DisassociateDeviceFromRoom'
    )


class XAmzTarget33(Enum):
    AlexaForBusiness_DisassociateSkillFromSkillGroup = (
        'AlexaForBusiness.DisassociateSkillFromSkillGroup'
    )


class XAmzTarget34(Enum):
    AlexaForBusiness_DisassociateSkillFromUsers = (
        'AlexaForBusiness.DisassociateSkillFromUsers'
    )


class XAmzTarget35(Enum):
    AlexaForBusiness_DisassociateSkillGroupFromRoom = (
        'AlexaForBusiness.DisassociateSkillGroupFromRoom'
    )


class XAmzTarget36(Enum):
    AlexaForBusiness_ForgetSmartHomeAppliances = (
        'AlexaForBusiness.ForgetSmartHomeAppliances'
    )


class XAmzTarget37(Enum):
    AlexaForBusiness_GetAddressBook = 'AlexaForBusiness.GetAddressBook'


class XAmzTarget38(Enum):
    AlexaForBusiness_GetConferencePreference = (
        'AlexaForBusiness.GetConferencePreference'
    )


class XAmzTarget39(Enum):
    AlexaForBusiness_GetConferenceProvider = 'AlexaForBusiness.GetConferenceProvider'


class XAmzTarget40(Enum):
    AlexaForBusiness_GetContact = 'AlexaForBusiness.GetContact'


class XAmzTarget41(Enum):
    AlexaForBusiness_GetDevice = 'AlexaForBusiness.GetDevice'


class XAmzTarget42(Enum):
    AlexaForBusiness_GetGateway = 'AlexaForBusiness.GetGateway'


class XAmzTarget43(Enum):
    AlexaForBusiness_GetGatewayGroup = 'AlexaForBusiness.GetGatewayGroup'


class XAmzTarget44(Enum):
    AlexaForBusiness_GetInvitationConfiguration = (
        'AlexaForBusiness.GetInvitationConfiguration'
    )


class XAmzTarget45(Enum):
    AlexaForBusiness_GetNetworkProfile = 'AlexaForBusiness.GetNetworkProfile'


class XAmzTarget46(Enum):
    AlexaForBusiness_GetProfile = 'AlexaForBusiness.GetProfile'


class XAmzTarget47(Enum):
    AlexaForBusiness_GetRoom = 'AlexaForBusiness.GetRoom'


class XAmzTarget48(Enum):
    AlexaForBusiness_GetRoomSkillParameter = 'AlexaForBusiness.GetRoomSkillParameter'


class XAmzTarget49(Enum):
    AlexaForBusiness_GetSkillGroup = 'AlexaForBusiness.GetSkillGroup'


class XAmzTarget50(Enum):
    AlexaForBusiness_ListBusinessReportSchedules = (
        'AlexaForBusiness.ListBusinessReportSchedules'
    )


class XAmzTarget51(Enum):
    AlexaForBusiness_ListConferenceProviders = (
        'AlexaForBusiness.ListConferenceProviders'
    )


class XAmzTarget52(Enum):
    AlexaForBusiness_ListDeviceEvents = 'AlexaForBusiness.ListDeviceEvents'


class XAmzTarget53(Enum):
    AlexaForBusiness_ListGatewayGroups = 'AlexaForBusiness.ListGatewayGroups'


class XAmzTarget54(Enum):
    AlexaForBusiness_ListGateways = 'AlexaForBusiness.ListGateways'


class XAmzTarget55(Enum):
    AlexaForBusiness_ListSkills = 'AlexaForBusiness.ListSkills'


class XAmzTarget56(Enum):
    AlexaForBusiness_ListSkillsStoreCategories = (
        'AlexaForBusiness.ListSkillsStoreCategories'
    )


class XAmzTarget57(Enum):
    AlexaForBusiness_ListSkillsStoreSkillsByCategory = (
        'AlexaForBusiness.ListSkillsStoreSkillsByCategory'
    )


class XAmzTarget58(Enum):
    AlexaForBusiness_ListSmartHomeAppliances = (
        'AlexaForBusiness.ListSmartHomeAppliances'
    )


class XAmzTarget59(Enum):
    AlexaForBusiness_ListTags = 'AlexaForBusiness.ListTags'


class XAmzTarget60(Enum):
    AlexaForBusiness_PutConferencePreference = (
        'AlexaForBusiness.PutConferencePreference'
    )


class XAmzTarget61(Enum):
    AlexaForBusiness_PutInvitationConfiguration = (
        'AlexaForBusiness.PutInvitationConfiguration'
    )


class XAmzTarget62(Enum):
    AlexaForBusiness_PutRoomSkillParameter = 'AlexaForBusiness.PutRoomSkillParameter'


class XAmzTarget63(Enum):
    AlexaForBusiness_PutSkillAuthorization = 'AlexaForBusiness.PutSkillAuthorization'


class XAmzTarget64(Enum):
    AlexaForBusiness_RegisterAVSDevice = 'AlexaForBusiness.RegisterAVSDevice'


class XAmzTarget65(Enum):
    AlexaForBusiness_RejectSkill = 'AlexaForBusiness.RejectSkill'


class XAmzTarget66(Enum):
    AlexaForBusiness_ResolveRoom = 'AlexaForBusiness.ResolveRoom'


class XAmzTarget67(Enum):
    AlexaForBusiness_RevokeInvitation = 'AlexaForBusiness.RevokeInvitation'


class XAmzTarget68(Enum):
    AlexaForBusiness_SearchAddressBooks = 'AlexaForBusiness.SearchAddressBooks'


class XAmzTarget69(Enum):
    AlexaForBusiness_SearchContacts = 'AlexaForBusiness.SearchContacts'


class XAmzTarget70(Enum):
    AlexaForBusiness_SearchDevices = 'AlexaForBusiness.SearchDevices'


class XAmzTarget71(Enum):
    AlexaForBusiness_SearchNetworkProfiles = 'AlexaForBusiness.SearchNetworkProfiles'


class XAmzTarget72(Enum):
    AlexaForBusiness_SearchProfiles = 'AlexaForBusiness.SearchProfiles'


class XAmzTarget73(Enum):
    AlexaForBusiness_SearchRooms = 'AlexaForBusiness.SearchRooms'


class XAmzTarget74(Enum):
    AlexaForBusiness_SearchSkillGroups = 'AlexaForBusiness.SearchSkillGroups'


class XAmzTarget75(Enum):
    AlexaForBusiness_SearchUsers = 'AlexaForBusiness.SearchUsers'


class XAmzTarget76(Enum):
    AlexaForBusiness_SendAnnouncement = 'AlexaForBusiness.SendAnnouncement'


class XAmzTarget77(Enum):
    AlexaForBusiness_SendInvitation = 'AlexaForBusiness.SendInvitation'


class XAmzTarget78(Enum):
    AlexaForBusiness_StartDeviceSync = 'AlexaForBusiness.StartDeviceSync'


class XAmzTarget79(Enum):
    AlexaForBusiness_StartSmartHomeApplianceDiscovery = (
        'AlexaForBusiness.StartSmartHomeApplianceDiscovery'
    )


class XAmzTarget80(Enum):
    AlexaForBusiness_TagResource = 'AlexaForBusiness.TagResource'


class XAmzTarget81(Enum):
    AlexaForBusiness_UntagResource = 'AlexaForBusiness.UntagResource'


class XAmzTarget82(Enum):
    AlexaForBusiness_UpdateAddressBook = 'AlexaForBusiness.UpdateAddressBook'


class XAmzTarget83(Enum):
    AlexaForBusiness_UpdateBusinessReportSchedule = (
        'AlexaForBusiness.UpdateBusinessReportSchedule'
    )


class XAmzTarget84(Enum):
    AlexaForBusiness_UpdateConferenceProvider = (
        'AlexaForBusiness.UpdateConferenceProvider'
    )


class XAmzTarget85(Enum):
    AlexaForBusiness_UpdateContact = 'AlexaForBusiness.UpdateContact'


class XAmzTarget86(Enum):
    AlexaForBusiness_UpdateDevice = 'AlexaForBusiness.UpdateDevice'


class XAmzTarget87(Enum):
    AlexaForBusiness_UpdateGateway = 'AlexaForBusiness.UpdateGateway'


class XAmzTarget88(Enum):
    AlexaForBusiness_UpdateGatewayGroup = 'AlexaForBusiness.UpdateGatewayGroup'


class XAmzTarget89(Enum):
    AlexaForBusiness_UpdateNetworkProfile = 'AlexaForBusiness.UpdateNetworkProfile'


class XAmzTarget90(Enum):
    AlexaForBusiness_UpdateProfile = 'AlexaForBusiness.UpdateProfile'


class XAmzTarget91(Enum):
    AlexaForBusiness_UpdateRoom = 'AlexaForBusiness.UpdateRoom'


class XAmzTarget92(Enum):
    AlexaForBusiness_UpdateSkillGroup = 'AlexaForBusiness.UpdateSkillGroup'


class AddressBook(BaseModel):
    AddressBookArn: Optional[Arn] = None
    Description: Optional[AddressBookDescription] = None
    Name: Optional[AddressBookName] = None


class AddressBookData(BaseModel):
    AddressBookArn: Optional[Arn] = None
    Description: Optional[AddressBookDescription] = None
    Name: Optional[AddressBookName] = None


class AddressBookDataList(RootModel[List[AddressBookData]]):
    root: List[AddressBookData]


class ApproveSkillRequest(BaseModel):
    SkillId_1: SkillId = Field(..., alias='SkillId')


class AssociateSkillWithSkillGroupRequest(BaseModel):
    SkillGroupArn: Optional[Arn] = None
    SkillId_1: SkillId = Field(..., alias='SkillId')


class AssociateSkillWithUsersRequest(BaseModel):
    SkillId_1: SkillId = Field(..., alias='SkillId')


class Audio(BaseModel):
    Locale_1: Locale = Field(..., alias='Locale')
    Location: AudioLocation


class AudioList(RootModel[List[Audio]]):
    root: List[Audio] = Field(..., max_length=1)


class AuthorizationResult(RootModel[Optional[Dict[str, Value]]]):
    root: Optional[Dict[str, Value]] = None


class BusinessReportContentRange(BaseModel):
    Interval: BusinessReportInterval


class BusinessReportRecurrence(BaseModel):
    StartDate: Optional[Date] = None


class BusinessReportS3Location(BaseModel):
    BucketName: Optional[CustomerS3BucketName] = None
    Path: Optional[BusinessReportS3Path] = None


class Category(BaseModel):
    CategoryId_1: Optional[CategoryId] = Field(None, alias='CategoryId')
    CategoryName_1: Optional[CategoryName] = Field(None, alias='CategoryName')


class CategoryList(RootModel[List[Category]]):
    root: List[Category]


class CreateInstantBooking(BaseModel):
    DurationInMinutes: Minutes
    Enabled: Boolean


class CreateRequireCheckIn(BaseModel):
    Enabled: Boolean
    ReleaseAfterMinutes: Minutes


class DeleteDeviceUsageDataRequest(BaseModel):
    DeviceArn: Arn
    DeviceUsageType_1: DeviceUsageType = Field(..., alias='DeviceUsageType')


class DeleteRoomSkillParameterRequest(BaseModel):
    ParameterKey: RoomSkillParameterKey
    RoomArn: Optional[Arn] = None
    SkillId_1: SkillId = Field(..., alias='SkillId')


class DeleteSkillAuthorizationRequest(BaseModel):
    RoomArn: Optional[Arn] = None
    SkillId_1: SkillId = Field(..., alias='SkillId')


class DeleteUserRequest(BaseModel):
    EnrollmentId_1: EnrollmentId = Field(..., alias='EnrollmentId')
    UserArn: Optional[Arn] = None


class DeveloperInfo(BaseModel):
    DeveloperName_1: Optional[DeveloperName] = Field(None, alias='DeveloperName')
    Email_1: Optional[Email] = Field(None, alias='Email')
    PrivacyPolicy_1: Optional[PrivacyPolicy] = Field(None, alias='PrivacyPolicy')
    Url_1: Optional[Url] = Field(None, alias='Url')


class DeviceEvent(BaseModel):
    Timestamp: Optional[DeviceEventTime] = None
    Type: Optional[DeviceEventType] = None
    Value: Optional[DeviceEventValue] = None


class DeviceEventList(RootModel[List[DeviceEvent]]):
    root: List[DeviceEvent]


class DeviceStatusDetail(BaseModel):
    Code: Optional[DeviceStatusDetailCode] = None
    Feature_1: Optional[Feature] = Field(None, alias='Feature')


class DeviceStatusDetails(RootModel[List[DeviceStatusDetail]]):
    root: List[DeviceStatusDetail]


class DeviceStatusInfo(BaseModel):
    ConnectionStatus_1: Optional[ConnectionStatus] = Field(
        None, alias='ConnectionStatus'
    )
    ConnectionStatusUpdatedTime_1: Optional[ConnectionStatusUpdatedTime] = Field(
        None, alias='ConnectionStatusUpdatedTime'
    )
    DeviceStatusDetails_1: Optional[DeviceStatusDetails] = Field(
        None, alias='DeviceStatusDetails'
    )


class DisassociateSkillFromSkillGroupRequest(BaseModel):
    SkillGroupArn: Optional[Arn] = None
    SkillId_1: SkillId = Field(..., alias='SkillId')


class DisassociateSkillFromUsersRequest(BaseModel):
    SkillId_1: SkillId = Field(..., alias='SkillId')


class EndOfMeetingReminderMinutesList(RootModel[List[Minutes]]):
    root: List[Minutes] = Field(..., max_length=1, min_length=1)


class Filter(BaseModel):
    Key: FilterKey
    Values: FilterValueList


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=25)


class Gateway(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description: Optional[GatewayDescription] = None
    GatewayGroupArn: Optional[Arn] = None
    Name: Optional[GatewayName] = None
    SoftwareVersion: Optional[GatewayVersion] = None


class GatewayGroup(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description: Optional[GatewayGroupDescription] = None
    Name: Optional[GatewayGroupName] = None


class GatewayGroupSummaries(RootModel[List[GatewayGroupSummary]]):
    root: List[GatewayGroupSummary]


class GatewaySummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description: Optional[GatewayDescription] = None
    GatewayGroupArn: Optional[Arn] = None
    Name: Optional[GatewayName] = None
    SoftwareVersion: Optional[GatewayVersion] = None


class GetAddressBookResponse(BaseModel):
    AddressBook_1: Optional[AddressBook] = Field(None, alias='AddressBook')


class GetGatewayGroupResponse(BaseModel):
    GatewayGroup_1: Optional[GatewayGroup] = Field(None, alias='GatewayGroup')


class GetGatewayResponse(BaseModel):
    Gateway_1: Optional[Gateway] = Field(None, alias='Gateway')


class GetRoomSkillParameterRequest(BaseModel):
    ParameterKey: RoomSkillParameterKey
    RoomArn: Optional[Arn] = None
    SkillId_1: SkillId = Field(..., alias='SkillId')


class InstantBooking(BaseModel):
    DurationInMinutes: Optional[Minutes] = None
    Enabled: Optional[Boolean] = None


class ListBusinessReportSchedulesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListConferenceProvidersRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDeviceEventsRequest(BaseModel):
    DeviceArn: Arn
    EventType: Optional[DeviceEventType] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDeviceEventsResponse(BaseModel):
    DeviceEvents: Optional[DeviceEventList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListGatewayGroupsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListGatewayGroupsResponse(BaseModel):
    GatewayGroups: Optional[GatewayGroupSummaries] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListGatewaysRequest(BaseModel):
    GatewayGroupArn: Optional[Arn] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSkillsRequest(BaseModel):
    EnablementType: Optional[EnablementTypeFilter] = None
    MaxResults: Optional[SkillListMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SkillGroupArn: Optional[Arn] = None
    SkillType: Optional[SkillTypeFilter] = None


class ListSkillsStoreCategoriesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSkillsStoreCategoriesResponse(BaseModel):
    CategoryList_1: Optional[CategoryList] = Field(None, alias='CategoryList')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSkillsStoreSkillsByCategoryRequest(BaseModel):
    CategoryId_1: CategoryId = Field(..., alias='CategoryId')
    MaxResults: Optional[SkillListMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSmartHomeAppliancesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RoomArn: Arn


class ListSmartHomeAppliancesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SmartHomeAppliances: Optional[SmartHomeApplianceList] = None


class ListTagsRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class MeetingSetting(BaseModel):
    RequirePin_1: RequirePin = Field(..., alias='RequirePin')


class NetworkProfile(BaseModel):
    CertificateAuthorityArn: Optional[Arn] = None
    CurrentPassword: Optional[CurrentWiFiPassword] = None
    Description: Optional[NetworkProfileDescription] = None
    EapMethod: Optional[NetworkEapMethod] = None
    NetworkProfileArn: Optional[Arn] = None
    NetworkProfileName_1: Optional[NetworkProfileName] = Field(
        None, alias='NetworkProfileName'
    )
    NextPassword: Optional[NextWiFiPassword] = None
    SecurityType: Optional[NetworkSecurityType] = None
    Ssid: Optional[NetworkSsid] = None
    TrustAnchors: Optional[TrustAnchorList] = None


class NetworkProfileData(BaseModel):
    CertificateAuthorityArn: Optional[Arn] = None
    Description: Optional[NetworkProfileDescription] = None
    EapMethod: Optional[NetworkEapMethod] = None
    NetworkProfileArn: Optional[Arn] = None
    NetworkProfileName_1: Optional[NetworkProfileName] = Field(
        None, alias='NetworkProfileName'
    )
    SecurityType: Optional[NetworkSecurityType] = None
    Ssid: Optional[NetworkSsid] = None


class NetworkProfileDataList(RootModel[List[NetworkProfileData]]):
    root: List[NetworkProfileData]


class PhoneNumber(BaseModel):
    Number: RawPhoneNumber
    Type: PhoneNumberType


class PhoneNumberList(RootModel[List[PhoneNumber]]):
    root: List[PhoneNumber] = Field(..., max_length=3, min_length=0)


class ProfileData(BaseModel):
    Address_1: Optional[Address] = Field(None, alias='Address')
    DistanceUnit_1: Optional[DistanceUnit] = Field(None, alias='DistanceUnit')
    IsDefault: Optional[Boolean] = None
    Locale: Optional[DeviceLocale] = None
    ProfileArn: Optional[Arn] = None
    ProfileName_1: Optional[ProfileName] = Field(None, alias='ProfileName')
    TemperatureUnit_1: Optional[TemperatureUnit] = Field(None, alias='TemperatureUnit')
    Timezone_1: Optional[Timezone] = Field(None, alias='Timezone')
    WakeWord_1: Optional[WakeWord] = Field(None, alias='WakeWord')


class ProfileDataList(RootModel[List[ProfileData]]):
    root: List[ProfileData]


class PutSkillAuthorizationRequest(BaseModel):
    AuthorizationResult_1: AuthorizationResult = Field(..., alias='AuthorizationResult')
    RoomArn: Optional[Arn] = None
    SkillId_1: SkillId = Field(..., alias='SkillId')


class RejectSkillRequest(BaseModel):
    SkillId_1: SkillId = Field(..., alias='SkillId')


class ResolveRoomRequest(BaseModel):
    SkillId_1: SkillId = Field(..., alias='SkillId')
    UserId_1: UserId = Field(..., alias='UserId')


class Room(BaseModel):
    Description: Optional[RoomDescription] = None
    ProfileArn: Optional[Arn] = None
    ProviderCalendarId_1: Optional[ProviderCalendarId] = Field(
        None, alias='ProviderCalendarId'
    )
    RoomArn: Optional[Arn] = None
    RoomName_1: Optional[RoomName] = Field(None, alias='RoomName')


class RoomData(BaseModel):
    Description: Optional[RoomDescription] = None
    ProfileArn: Optional[Arn] = None
    ProfileName_1: Optional[ProfileName] = Field(None, alias='ProfileName')
    ProviderCalendarId_1: Optional[ProviderCalendarId] = Field(
        None, alias='ProviderCalendarId'
    )
    RoomArn: Optional[Arn] = None
    RoomName_1: Optional[RoomName] = Field(None, alias='RoomName')


class RoomDataList(RootModel[List[RoomData]]):
    root: List[RoomData]


class RoomSkillParameter(BaseModel):
    ParameterKey: RoomSkillParameterKey
    ParameterValue: RoomSkillParameterValue


class RoomSkillParameters(RootModel[List[RoomSkillParameter]]):
    root: List[RoomSkillParameter]


class SampleUtterances(RootModel[List[Utterance]]):
    root: List[Utterance]


class SearchAddressBooksResponse(BaseModel):
    AddressBooks: Optional[AddressBookDataList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class SearchNetworkProfilesResponse(BaseModel):
    NetworkProfiles: Optional[NetworkProfileDataList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class SearchProfilesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Profiles: Optional[ProfileDataList] = None
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class SearchRoomsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Rooms: Optional[RoomDataList] = None
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class ShortSkillIdList(RootModel[List[SkillId]]):
    root: List[SkillId] = Field(..., max_length=3, min_length=0)


class SipAddress(BaseModel):
    Type: SipType
    Uri: SipUri


class SipAddressList(RootModel[List[SipAddress]]):
    root: List[SipAddress] = Field(..., max_length=1, min_length=0)


class SkillDetails(BaseModel):
    BulletPoints_1: Optional[BulletPoints] = Field(None, alias='BulletPoints')
    DeveloperInfo_1: Optional[DeveloperInfo] = Field(None, alias='DeveloperInfo')
    EndUserLicenseAgreement_1: Optional[EndUserLicenseAgreement] = Field(
        None, alias='EndUserLicenseAgreement'
    )
    GenericKeywords_1: Optional[GenericKeywords] = Field(None, alias='GenericKeywords')
    InvocationPhrase_1: Optional[InvocationPhrase] = Field(
        None, alias='InvocationPhrase'
    )
    NewInThisVersionBulletPoints_1: Optional[NewInThisVersionBulletPoints] = Field(
        None, alias='NewInThisVersionBulletPoints'
    )
    ProductDescription_1: Optional[ProductDescription] = Field(
        None, alias='ProductDescription'
    )
    ReleaseDate_1: Optional[ReleaseDate] = Field(None, alias='ReleaseDate')
    Reviews_1: Optional[Reviews] = Field(None, alias='Reviews')
    SkillTypes_1: Optional[SkillTypes] = Field(None, alias='SkillTypes')


class SkillGroup(BaseModel):
    Description: Optional[SkillGroupDescription] = None
    SkillGroupArn: Optional[Arn] = None
    SkillGroupName_1: Optional[SkillGroupName] = Field(None, alias='SkillGroupName')


class SkillGroupData(BaseModel):
    Description: Optional[SkillGroupDescription] = None
    SkillGroupArn: Optional[Arn] = None
    SkillGroupName_1: Optional[SkillGroupName] = Field(None, alias='SkillGroupName')


class SkillGroupDataList(RootModel[List[SkillGroupData]]):
    root: List[SkillGroupData]


class SkillSummary(BaseModel):
    EnablementType_1: Optional[EnablementType] = Field(None, alias='EnablementType')
    SkillId_1: Optional[SkillId] = Field(None, alias='SkillId')
    SkillName_1: Optional[SkillName] = Field(None, alias='SkillName')
    SkillType_1: Optional[SkillType] = Field(None, alias='SkillType')
    SupportsLinking: Optional[Boolean] = None


class SkillSummaryList(RootModel[List[SkillSummary]]):
    root: List[SkillSummary]


class SkillsStoreSkill(BaseModel):
    IconUrl_1: Optional[IconUrl] = Field(None, alias='IconUrl')
    SampleUtterances_1: Optional[SampleUtterances] = Field(
        None, alias='SampleUtterances'
    )
    ShortDescription_1: Optional[ShortDescription] = Field(
        None, alias='ShortDescription'
    )
    SkillDetails_1: Optional[SkillDetails] = Field(None, alias='SkillDetails')
    SkillId_1: Optional[SkillId] = Field(None, alias='SkillId')
    SkillName_1: Optional[SkillName] = Field(None, alias='SkillName')
    SupportsLinking: Optional[Boolean] = None


class SkillsStoreSkillList(RootModel[List[SkillsStoreSkill]]):
    root: List[SkillsStoreSkill]


class Sort(BaseModel):
    Key: SortKey
    Value: SortValue


class SortList(RootModel[List[Sort]]):
    root: List[Sort] = Field(..., max_length=25)


class Ssml(BaseModel):
    Locale_1: Locale = Field(..., alias='Locale')
    Value: SsmlValue


class SsmlList(RootModel[List[Ssml]]):
    root: List[Ssml] = Field(..., max_length=1)


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    Tags: TagList


class Text(BaseModel):
    Locale_1: Locale = Field(..., alias='Locale')
    Value: TextValue


class TextList(RootModel[List[Text]]):
    root: List[Text] = Field(..., max_length=1)


class UpdateBusinessReportScheduleRequest(BaseModel):
    Format: Optional[BusinessReportFormat] = None
    Recurrence: Optional[BusinessReportRecurrence] = None
    S3BucketName: Optional[CustomerS3BucketName] = None
    S3KeyPrefix_1: Optional[S3KeyPrefix] = Field(None, alias='S3KeyPrefix')
    ScheduleArn: Arn
    ScheduleName: Optional[BusinessReportScheduleName] = None


class UpdateConferenceProviderRequest(BaseModel):
    ConferenceProviderArn: Arn
    ConferenceProviderType_1: ConferenceProviderType = Field(
        ..., alias='ConferenceProviderType'
    )
    IPDialIn_1: Optional[IPDialIn] = Field(None, alias='IPDialIn')
    MeetingSetting_1: MeetingSetting = Field(..., alias='MeetingSetting')
    PSTNDialIn_1: Optional[PSTNDialIn] = Field(None, alias='PSTNDialIn')


class UpdateContactRequest(BaseModel):
    ContactArn: Arn
    DisplayName: Optional[ContactName] = None
    FirstName: Optional[ContactName] = None
    LastName: Optional[ContactName] = None
    PhoneNumber: Optional[RawPhoneNumber] = None
    PhoneNumbers: Optional[PhoneNumberList] = None
    SipAddresses: Optional[SipAddressList] = None


class UpdateEndOfMeetingReminder(BaseModel):
    Enabled: Optional[Boolean] = None
    ReminderAtMinutes: Optional[EndOfMeetingReminderMinutesList] = None
    ReminderType: Optional[EndOfMeetingReminderType] = None


class UpdateMeetingRoomConfiguration(BaseModel):
    EndOfMeetingReminder: Optional[UpdateEndOfMeetingReminder] = None
    InstantBooking: Optional[UpdateInstantBooking] = None
    RequireCheckIn: Optional[UpdateRequireCheckIn] = None
    RoomUtilizationMetricsEnabled: Optional[Boolean] = None


class UpdateProfileRequest(BaseModel):
    Address_1: Optional[Address] = Field(None, alias='Address')
    DataRetentionOptIn: Optional[Boolean] = None
    DistanceUnit_1: Optional[DistanceUnit] = Field(None, alias='DistanceUnit')
    IsDefault: Optional[Boolean] = None
    Locale: Optional[DeviceLocale] = None
    MaxVolumeLimit_1: Optional[MaxVolumeLimit] = Field(None, alias='MaxVolumeLimit')
    MeetingRoomConfiguration: Optional[UpdateMeetingRoomConfiguration] = None
    PSTNEnabled: Optional[Boolean] = None
    ProfileArn: Optional[Arn] = None
    ProfileName_1: Optional[ProfileName] = Field(None, alias='ProfileName')
    SetupModeDisabled: Optional[Boolean] = None
    TemperatureUnit_1: Optional[TemperatureUnit] = Field(None, alias='TemperatureUnit')
    Timezone_1: Optional[Timezone] = Field(None, alias='Timezone')
    WakeWord_1: Optional[WakeWord] = Field(None, alias='WakeWord')


class UserData(BaseModel):
    Email_1: Optional[Email] = Field(None, alias='Email')
    EnrollmentId_1: Optional[EnrollmentId] = Field(None, alias='EnrollmentId')
    EnrollmentStatus_1: Optional[EnrollmentStatus] = Field(
        None, alias='EnrollmentStatus'
    )
    FirstName: Optional[UserFirstName] = None
    LastName: Optional[UserLastName] = None
    UserArn: Optional[Arn] = None


class UserDataList(RootModel[List[UserData]]):
    root: List[UserData]


class BusinessReport(BaseModel):
    DeliveryTime: Optional[BusinessReportDeliveryTime] = None
    DownloadUrl: Optional[BusinessReportDownloadUrl] = None
    FailureCode: Optional[BusinessReportFailureCode] = None
    S3Location: Optional[BusinessReportS3Location] = None
    Status: Optional[BusinessReportStatus] = None


class BusinessReportSchedule(BaseModel):
    ContentRange: Optional[BusinessReportContentRange] = None
    Format: Optional[BusinessReportFormat] = None
    LastBusinessReport: Optional[BusinessReport] = None
    Recurrence: Optional[BusinessReportRecurrence] = None
    S3BucketName: Optional[CustomerS3BucketName] = None
    S3KeyPrefix_1: Optional[S3KeyPrefix] = Field(None, alias='S3KeyPrefix')
    ScheduleArn: Optional[Arn] = None
    ScheduleName: Optional[BusinessReportScheduleName] = None


class BusinessReportScheduleList(RootModel[List[BusinessReportSchedule]]):
    root: List[BusinessReportSchedule]


class ConferenceProvider(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    IPDialIn_1: Optional[IPDialIn] = Field(None, alias='IPDialIn')
    MeetingSetting_1: Optional[MeetingSetting] = Field(None, alias='MeetingSetting')
    Name: Optional[ConferenceProviderName] = None
    PSTNDialIn_1: Optional[PSTNDialIn] = Field(None, alias='PSTNDialIn')
    Type: Optional[ConferenceProviderType] = None


class ConferenceProvidersList(RootModel[List[ConferenceProvider]]):
    root: List[ConferenceProvider]


class Contact(BaseModel):
    ContactArn: Optional[Arn] = None
    DisplayName: Optional[ContactName] = None
    FirstName: Optional[ContactName] = None
    LastName: Optional[ContactName] = None
    PhoneNumber: Optional[RawPhoneNumber] = None
    PhoneNumbers: Optional[PhoneNumberList] = None
    SipAddresses: Optional[SipAddressList] = None


class ContactData(BaseModel):
    ContactArn: Optional[Arn] = None
    DisplayName: Optional[ContactName] = None
    FirstName: Optional[ContactName] = None
    LastName: Optional[ContactName] = None
    PhoneNumber: Optional[RawPhoneNumber] = None
    PhoneNumbers: Optional[PhoneNumberList] = None
    SipAddresses: Optional[SipAddressList] = None


class ContactDataList(RootModel[List[ContactData]]):
    root: List[ContactData]


class Content(BaseModel):
    AudioList_1: Optional[AudioList] = Field(None, alias='AudioList')
    SsmlList_1: Optional[SsmlList] = Field(None, alias='SsmlList')
    TextList_1: Optional[TextList] = Field(None, alias='TextList')


class CreateAddressBookRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description: Optional[AddressBookDescription] = None
    Name: AddressBookName
    Tags: Optional[TagList] = None


class CreateBusinessReportScheduleRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    ContentRange: BusinessReportContentRange
    Format: BusinessReportFormat
    Recurrence: Optional[BusinessReportRecurrence] = None
    S3BucketName: Optional[CustomerS3BucketName] = None
    S3KeyPrefix_1: Optional[S3KeyPrefix] = Field(None, alias='S3KeyPrefix')
    ScheduleName: Optional[BusinessReportScheduleName] = None
    Tags: Optional[TagList] = None


class CreateConferenceProviderRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    ConferenceProviderName_1: ConferenceProviderName = Field(
        ..., alias='ConferenceProviderName'
    )
    ConferenceProviderType_1: ConferenceProviderType = Field(
        ..., alias='ConferenceProviderType'
    )
    IPDialIn_1: Optional[IPDialIn] = Field(None, alias='IPDialIn')
    MeetingSetting_1: MeetingSetting = Field(..., alias='MeetingSetting')
    PSTNDialIn_1: Optional[PSTNDialIn] = Field(None, alias='PSTNDialIn')
    Tags: Optional[TagList] = None


class CreateContactRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DisplayName: Optional[ContactName] = None
    FirstName: ContactName
    LastName: Optional[ContactName] = None
    PhoneNumber: Optional[RawPhoneNumber] = None
    PhoneNumbers: Optional[PhoneNumberList] = None
    SipAddresses: Optional[SipAddressList] = None
    Tags: Optional[TagList] = None


class CreateEndOfMeetingReminder(BaseModel):
    Enabled: Boolean
    ReminderAtMinutes: EndOfMeetingReminderMinutesList
    ReminderType: EndOfMeetingReminderType


class CreateGatewayGroupRequest(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Description: Optional[GatewayGroupDescription] = None
    Name: GatewayGroupName
    Tags: Optional[TagList] = None


class CreateMeetingRoomConfiguration(BaseModel):
    EndOfMeetingReminder: Optional[CreateEndOfMeetingReminder] = None
    InstantBooking: Optional[CreateInstantBooking] = None
    RequireCheckIn: Optional[CreateRequireCheckIn] = None
    RoomUtilizationMetricsEnabled: Optional[Boolean] = None


class CreateNetworkProfileRequest(BaseModel):
    CertificateAuthorityArn: Optional[Arn] = None
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    CurrentPassword: Optional[CurrentWiFiPassword] = None
    Description: Optional[NetworkProfileDescription] = None
    EapMethod: Optional[NetworkEapMethod] = None
    NetworkProfileName_1: NetworkProfileName = Field(..., alias='NetworkProfileName')
    NextPassword: Optional[NextWiFiPassword] = None
    SecurityType: NetworkSecurityType
    Ssid: NetworkSsid
    Tags: Optional[TagList] = None
    TrustAnchors: Optional[TrustAnchorList] = None


class CreateProfileRequest(BaseModel):
    Address_1: Address = Field(..., alias='Address')
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    DataRetentionOptIn: Optional[Boolean] = None
    DistanceUnit_1: DistanceUnit = Field(..., alias='DistanceUnit')
    Locale: Optional[DeviceLocale] = None
    MaxVolumeLimit_1: Optional[MaxVolumeLimit] = Field(None, alias='MaxVolumeLimit')
    MeetingRoomConfiguration: Optional[CreateMeetingRoomConfiguration] = None
    PSTNEnabled: Optional[Boolean] = None
    ProfileName_1: ProfileName = Field(..., alias='ProfileName')
    SetupModeDisabled: Optional[Boolean] = None
    Tags: Optional[TagList] = None
    TemperatureUnit_1: TemperatureUnit = Field(..., alias='TemperatureUnit')
    Timezone_1: Timezone = Field(..., alias='Timezone')
    WakeWord_1: WakeWord = Field(..., alias='WakeWord')


class CreateRoomRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description: Optional[RoomDescription] = None
    ProfileArn: Optional[Arn] = None
    ProviderCalendarId_1: Optional[ProviderCalendarId] = Field(
        None, alias='ProviderCalendarId'
    )
    RoomName_1: RoomName = Field(..., alias='RoomName')
    Tags: Optional[TagList] = None


class CreateSkillGroupRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Description: Optional[SkillGroupDescription] = None
    SkillGroupName_1: SkillGroupName = Field(..., alias='SkillGroupName')
    Tags: Optional[TagList] = None


class CreateUserRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Email_1: Optional[Email] = Field(None, alias='Email')
    FirstName: Optional[UserFirstName] = None
    LastName: Optional[UserLastName] = None
    Tags: Optional[TagList] = None
    UserId: UserUserId


class Device(BaseModel):
    DeviceArn: Optional[Arn] = None
    DeviceName_1: Optional[DeviceName] = Field(None, alias='DeviceName')
    DeviceSerialNumber_1: Optional[DeviceSerialNumber] = Field(
        None, alias='DeviceSerialNumber'
    )
    DeviceStatus_1: Optional[DeviceStatus] = Field(None, alias='DeviceStatus')
    DeviceStatusInfo_1: Optional[DeviceStatusInfo] = Field(
        None, alias='DeviceStatusInfo'
    )
    DeviceType_1: Optional[DeviceType] = Field(None, alias='DeviceType')
    MacAddress_1: Optional[MacAddress] = Field(None, alias='MacAddress')
    NetworkProfileInfo: Optional[DeviceNetworkProfileInfo] = None
    RoomArn: Optional[Arn] = None
    SoftwareVersion_1: Optional[SoftwareVersion] = Field(None, alias='SoftwareVersion')


class DeviceData(BaseModel):
    CreatedTime: Optional[DeviceDataCreatedTime] = None
    DeviceArn: Optional[Arn] = None
    DeviceName_1: Optional[DeviceName] = Field(None, alias='DeviceName')
    DeviceSerialNumber_1: Optional[DeviceSerialNumber] = Field(
        None, alias='DeviceSerialNumber'
    )
    DeviceStatus_1: Optional[DeviceStatus] = Field(None, alias='DeviceStatus')
    DeviceStatusInfo_1: Optional[DeviceStatusInfo] = Field(
        None, alias='DeviceStatusInfo'
    )
    DeviceType_1: Optional[DeviceType] = Field(None, alias='DeviceType')
    MacAddress_1: Optional[MacAddress] = Field(None, alias='MacAddress')
    NetworkProfileArn: Optional[Arn] = None
    NetworkProfileName_1: Optional[NetworkProfileName] = Field(
        None, alias='NetworkProfileName'
    )
    RoomArn: Optional[Arn] = None
    RoomName: Optional[DeviceRoomName] = None
    SoftwareVersion_1: Optional[SoftwareVersion] = Field(None, alias='SoftwareVersion')


class DeviceDataList(RootModel[List[DeviceData]]):
    root: List[DeviceData]


class EndOfMeetingReminder(BaseModel):
    Enabled: Optional[Boolean] = None
    ReminderAtMinutes: Optional[EndOfMeetingReminderMinutesList] = None
    ReminderType: Optional[EndOfMeetingReminderType] = None


class GatewaySummaries(RootModel[List[GatewaySummary]]):
    root: List[GatewaySummary]


class GetConferenceProviderResponse(BaseModel):
    ConferenceProvider_1: Optional[ConferenceProvider] = Field(
        None, alias='ConferenceProvider'
    )


class GetContactResponse(BaseModel):
    Contact_1: Optional[Contact] = Field(None, alias='Contact')


class GetDeviceResponse(BaseModel):
    Device_1: Optional[Device] = Field(None, alias='Device')


class GetInvitationConfigurationResponse(BaseModel):
    ContactEmail: Optional[Email] = None
    OrganizationName_1: Optional[OrganizationName] = Field(
        None, alias='OrganizationName'
    )
    PrivateSkillIds: Optional[ShortSkillIdList] = None


class GetNetworkProfileResponse(BaseModel):
    NetworkProfile_1: Optional[NetworkProfile] = Field(None, alias='NetworkProfile')


class GetRoomResponse(BaseModel):
    Room_1: Optional[Room] = Field(None, alias='Room')


class GetRoomSkillParameterResponse(BaseModel):
    RoomSkillParameter_1: Optional[RoomSkillParameter] = Field(
        None, alias='RoomSkillParameter'
    )


class GetSkillGroupResponse(BaseModel):
    SkillGroup_1: Optional[SkillGroup] = Field(None, alias='SkillGroup')


class ListBusinessReportSchedulesResponse(BaseModel):
    BusinessReportSchedules: Optional[BusinessReportScheduleList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListConferenceProvidersResponse(BaseModel):
    ConferenceProviders: Optional[ConferenceProvidersList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListGatewaysResponse(BaseModel):
    Gateways: Optional[GatewaySummaries] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListSkillsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SkillSummaries: Optional[SkillSummaryList] = None


class ListSkillsStoreSkillsByCategoryResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SkillsStoreSkills: Optional[SkillsStoreSkillList] = None


class ListTagsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags: Optional[TagList] = None


class MeetingRoomConfiguration(BaseModel):
    EndOfMeetingReminder_1: Optional[EndOfMeetingReminder] = Field(
        None, alias='EndOfMeetingReminder'
    )
    InstantBooking_1: Optional[InstantBooking] = Field(None, alias='InstantBooking')
    RequireCheckIn_1: Optional[RequireCheckIn] = Field(None, alias='RequireCheckIn')
    RoomUtilizationMetricsEnabled: Optional[Boolean] = None


class Profile(BaseModel):
    Address_1: Optional[Address] = Field(None, alias='Address')
    AddressBookArn: Optional[Arn] = None
    DataRetentionOptIn: Optional[Boolean] = None
    DistanceUnit_1: Optional[DistanceUnit] = Field(None, alias='DistanceUnit')
    IsDefault: Optional[Boolean] = None
    Locale: Optional[DeviceLocale] = None
    MaxVolumeLimit_1: Optional[MaxVolumeLimit] = Field(None, alias='MaxVolumeLimit')
    MeetingRoomConfiguration_1: Optional[MeetingRoomConfiguration] = Field(
        None, alias='MeetingRoomConfiguration'
    )
    PSTNEnabled: Optional[Boolean] = None
    ProfileArn: Optional[Arn] = None
    ProfileName_1: Optional[ProfileName] = Field(None, alias='ProfileName')
    SetupModeDisabled: Optional[Boolean] = None
    TemperatureUnit_1: Optional[TemperatureUnit] = Field(None, alias='TemperatureUnit')
    Timezone_1: Optional[Timezone] = Field(None, alias='Timezone')
    WakeWord_1: Optional[WakeWord] = Field(None, alias='WakeWord')


class PutInvitationConfigurationRequest(BaseModel):
    ContactEmail: Optional[Email] = None
    OrganizationName_1: OrganizationName = Field(..., alias='OrganizationName')
    PrivateSkillIds: Optional[ShortSkillIdList] = None


class PutRoomSkillParameterRequest(BaseModel):
    RoomArn: Optional[Arn] = None
    RoomSkillParameter_1: RoomSkillParameter = Field(..., alias='RoomSkillParameter')
    SkillId_1: SkillId = Field(..., alias='SkillId')


class RegisterAVSDeviceRequest(BaseModel):
    AmazonId_1: AmazonId = Field(..., alias='AmazonId')
    ClientId_1: ClientId = Field(..., alias='ClientId')
    DeviceSerialNumber: Optional[DeviceSerialNumberForAVS] = None
    ProductId_1: ProductId = Field(..., alias='ProductId')
    RoomArn: Optional[Arn] = None
    Tags: Optional[TagList] = None
    UserCode_1: UserCode = Field(..., alias='UserCode')


class ResolveRoomResponse(BaseModel):
    RoomArn: Optional[Arn] = None
    RoomName_1: Optional[RoomName] = Field(None, alias='RoomName')
    RoomSkillParameters_1: Optional[RoomSkillParameters] = Field(
        None, alias='RoomSkillParameters'
    )


class SearchAddressBooksRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchContactsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchContactsResponse(BaseModel):
    Contacts: Optional[ContactDataList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class SearchDevicesRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchDevicesResponse(BaseModel):
    Devices: Optional[DeviceDataList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class SearchNetworkProfilesRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchProfilesRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchRoomsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchSkillGroupsRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchSkillGroupsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SkillGroups: Optional[SkillGroupDataList] = None
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')


class SearchUsersRequest(BaseModel):
    Filters: Optional[FilterList] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SortCriteria: Optional[SortList] = None


class SearchUsersResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TotalCount_1: Optional[TotalCount] = Field(None, alias='TotalCount')
    Users: Optional[UserDataList] = None


class SendAnnouncementRequest(BaseModel):
    ClientRequestToken_1: ClientRequestToken = Field(..., alias='ClientRequestToken')
    Content_1: Content = Field(..., alias='Content')
    RoomFilters: FilterList
    TimeToLiveInSeconds_1: Optional[TimeToLiveInSeconds] = Field(
        None, alias='TimeToLiveInSeconds'
    )


class GetProfileResponse(BaseModel):
    Profile_1: Optional[Profile] = Field(None, alias='Profile')
